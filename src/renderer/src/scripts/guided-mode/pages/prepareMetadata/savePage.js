import { getEntityObjForEntityType } from "../../../../stores/slices/datasetEntitySelectorSlice";
import { guidedSkipPage, guidedUnSkipPage } from "../navigationUtils/pageSkipping";
import useGlobalStore from "../../../../stores/globalStore";

export const savePagePrepareMetadata = async (pageBeingLeftID) => {
  const errorArray = [];
  if (pageBeingLeftID === "guided-manifest-subject-entity-selector-tab") {
    window.sodaJSONObj["subject-related-folders-and-files"] = getEntityObjForEntityType(
      "subject-related-folders-and-files"
    );
    console.log(
      "subject-related-folders-and-files",
      window.sodaJSONObj["subject-related-folders-and-files"]
    );
  }
  if (pageBeingLeftID === "guided-manifest-performance-entity-selector-tab") {
    window.sodaJSONObj["performance-related-folders-and-files"] = getEntityObjForEntityType(
      "performance-related-folders-and-files"
    );
    console.log(
      "performance-related-folders-and-files",
      window.sodaJSONObj["performance-related-folders-and-files"]
    );
  }

  if (pageBeingLeftID === "guided-ask-if-submission-is-sparc-funded-tab") {
    // NOTE: We use the button config generated by this page to determine if the dataset is SPARC funded
    // See the function: datasetIsSparcFunded()
    const userSelectedDatasetIsSparcFunded = document
      .getElementById("guided-button-dataset-is-sparc-funded")
      .classList.contains("selected");
    const userSelectedDatasetIsReJoinFunded = document
      .getElementById("guided-button-dataset-is-re-join-funded")
      .classList.contains("selected");
    const userSelectedDatasetIsOtherFunded = document
      .getElementById("guided-button-dataset-is-not-sparc-funded")
      .classList.contains("selected");

    if (
      !userSelectedDatasetIsSparcFunded &&
      !userSelectedDatasetIsReJoinFunded &&
      !userSelectedDatasetIsOtherFunded
    ) {
      errorArray.push({
        type: "notyf",
        message: "Please indicate the funding source for this dataset.",
      });
      throw errorArray;
    }

    // If the user selected that the dataset is SPARC funded, unskip the submission metadata page
    if (userSelectedDatasetIsSparcFunded) {
      // Set the consortium data standard value in the JSON
      window.sodaJSONObj["dataset_metadata"]["submission-metadata"]["consortium-data-standard"] =
        "SPARC";
      const selectedFuncingSourceFromDropdown =
        useGlobalStore.getState()["dropDownState"]["guided-select-sparc-funding-consortium"]
          .selectedValue;

      // Throw an error if the user did not select a funding source from the dropdown
      if (!selectedFuncingSourceFromDropdown) {
        errorArray.push({
          type: "notyf",
          message: "Please select a funding source from the dropdown.",
        });
        throw errorArray;
      } else {
        // Set the funding consortium value in the JSON
        window.sodaJSONObj["dataset_metadata"]["submission-metadata"]["funding-consortium"] =
          selectedFuncingSourceFromDropdown;
      }
    }

    if (userSelectedDatasetIsReJoinFunded) {
      window.sodaJSONObj["dataset_metadata"]["submission-metadata"]["consortium-data-standard"] =
        "HEAL";
      window.sodaJSONObj["dataset_metadata"]["submission-metadata"]["funding-consortium"] =
        "REJOIN-HEAL";
    }

    if (userSelectedDatasetIsOtherFunded) {
      const userSelectedTheyHaveReachedOutToCurationTeam = document
        .getElementById("guided-button-non-sparc-user-has-contacted-sparc")
        .classList.contains("selected");
      const userSelectedTheyHaveNotReachedOutToCurationTeam = document
        .getElementById("guided-button-non-sparc-user-has-not-contacted-sparc")
        .classList.contains("selected");

      if (
        !userSelectedTheyHaveReachedOutToCurationTeam &&
        !userSelectedTheyHaveNotReachedOutToCurationTeam
      ) {
        errorArray.push({
          type: "notyf",
          message: "Please indicate if you have reached out to the curation team",
        });
        throw errorArray;
      }
      if (userSelectedTheyHaveNotReachedOutToCurationTeam) {
        errorArray.push({
          type: "notyf",
          message: "Please reach out to the curation team before continuing the curation process",
        });
        throw errorArray;
      }

      window.sodaJSONObj["dataset_metadata"]["submission-metadata"]["consortium-data-standard"] =
        "";
      window.sodaJSONObj["dataset_metadata"]["submission-metadata"]["funding-consortium"] =
        "EXTERNAL";
    }

    const setConsortiumDataStandard =
      window.sodaJSONObj["dataset_metadata"]["submission-metadata"]["consortium-data-standard"];
    // If the set consortium data standard is SPARC, unskip the SPARC specific metadata pages
    if (setConsortiumDataStandard === "SPARC") {
      const setFundingConsortium =
        window.sodaJSONObj["dataset_metadata"]["submission-metadata"]["funding-consortium"];
      if (setFundingConsortium === "SPARC") {
        // If the funding consortium is SPARC, unskip the protocols page
        guidedUnSkipPage("guided-protocols-tab");
      } else {
        // If the funding consortium is not SPARC, skip the protocols page
        guidedSkipPage("guided-protocols-tab");
      }
      guidedUnSkipPage("guided-create-submission-metadata-tab");
    } else {
      // If the set consortium data standard is not SPARC, skip the SPARC specific metadata pages
      guidedSkipPage("guided-create-submission-metadata-tab");
      guidedSkipPage("guided-protocols-tab");
      // Manually set the SPARC award number to "EXTERNAL" for non-SPARC funded datasets (case for all non-SPARC funded datasets)
      window.sodaJSONObj["dataset_metadata"]["shared-metadata"]["sparc-award"] = "";
      window.sodaJSONObj["dataset_metadata"]["submission-metadata"]["milestones"] = [""];
      window.sodaJSONObj["dataset_metadata"]["submission-metadata"]["completion-date"] = "";
    }
  }
};
