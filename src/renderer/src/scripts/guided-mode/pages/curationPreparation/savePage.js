import { guidedSkipPage, guidedUnSkipPage } from "../../pageNavigation/pageSkipping";
import useGlobalStore from "../../../../stores/globalStore";

let homeDir = await window.electron.ipcRenderer.invoke("get-app-path", "home");
let guidedProgressFilePath = window.path.join(homeDir, "SODA", "Guided-Progress");

const getGuidedProgressFileNames = () => {
  return window.fs
    .readdirSync(guidedProgressFilePath)
    .map((progressFileName) => progressFileName.replace(".json", ""));
};

const updateGuidedDatasetName = (newDatasetName) => {
  const previousDatasetName = window.sodaJSONObj["digital-metadata"]["name"];

  //update old progress file with new dataset name
  const oldProgressFilePath = `${guidedProgressFilePath}/${previousDatasetName}.json`;
  const newProgressFilePath = `${guidedProgressFilePath}/${newDatasetName}.json`;
  window.fs.renameSync(oldProgressFilePath, newProgressFilePath);

  const bannerImagePathToUpdate = window.sodaJSONObj["digital-metadata"]["banner-image-path"];
  if (bannerImagePathToUpdate) {
    const newBannerImagePath = bannerImagePathToUpdate.replace(previousDatasetName, newDatasetName);
    //Rename the old banner image folder to the new dataset name
    window.fs.renameSync(bannerImagePathToUpdate, newBannerImagePath);
    //change the banner image path in the JSON obj
    window.sodaJSONObj["digital-metadata"]["banner-image-path"] = newBannerImagePath;
  }
  window.sodaJSONObj["digital-metadata"]["name"] = newDatasetName;
};

export const savePageCurationPreparation = async (pageBeingLeftID) => {
  const errorArray = [];

  if (pageBeingLeftID === "guided-ask-if-submission-is-sparc-funded-tab") {
    // NOTE: We use the button config generated by this page to determine if the dataset is SPARC funded
    // See the function: datasetIsSparcFunded()
    const userSelectedDatasetIsSparcFunded = document
      .getElementById("guided-button-dataset-is-sparc-funded")
      .classList.contains("selected");
    const userSelectedDatasetIsReJoinFunded = document
      .getElementById("guided-button-dataset-is-re-join-funded")
      .classList.contains("selected");
    const userSelectedDatasetIsOtherFunded = document
      .getElementById("guided-button-dataset-is-not-sparc-funded")
      .classList.contains("selected");

    if (
      !userSelectedDatasetIsSparcFunded &&
      !userSelectedDatasetIsReJoinFunded &&
      !userSelectedDatasetIsOtherFunded
    ) {
      errorArray.push({
        type: "notyf",
        message: "Please indicate the funding source for this dataset.",
      });
      throw errorArray;
    }

    // If the user selected that the dataset is SPARC funded, unskip the submission metadata page
    if (userSelectedDatasetIsSparcFunded) {
      // Set the consortium data standard value in the JSON
      window.sodaJSONObj["dataset-metadata"]["submission-metadata"]["consortium-data-standard"] =
        "SPARC";
      const selectedFuncingSourceFromDropdown =
        useGlobalStore.getState()["dropDownState"]["guided-select-sparc-funding-consortium"]
          .selectedValue;

      // Throw an error if the user did not select a funding source from the dropdown
      if (!selectedFuncingSourceFromDropdown) {
        errorArray.push({
          type: "notyf",
          message: "Please select a funding source from the dropdown.",
        });
        throw errorArray;
      } else {
        // Set the funding consortium value in the JSON
        window.sodaJSONObj["dataset-metadata"]["submission-metadata"]["funding-consortium"] =
          selectedFuncingSourceFromDropdown;
      }
    }

    if (userSelectedDatasetIsReJoinFunded) {
      window.sodaJSONObj["dataset-metadata"]["submission-metadata"]["consortium-data-standard"] =
        "HEAL";
      window.sodaJSONObj["dataset-metadata"]["submission-metadata"]["funding-consortium"] =
        "REJOIN-HEAL";
    }

    if (userSelectedDatasetIsOtherFunded) {
      const userSelectedTheyHaveReachedOutToCurationTeam = document
        .getElementById("guided-button-non-sparc-user-has-contacted-sparc")
        .classList.contains("selected");
      const userSelectedTheyHaveNotReachedOutToCurationTeam = document
        .getElementById("guided-button-non-sparc-user-has-not-contacted-sparc")
        .classList.contains("selected");

      if (
        !userSelectedTheyHaveReachedOutToCurationTeam &&
        !userSelectedTheyHaveNotReachedOutToCurationTeam
      ) {
        errorArray.push({
          type: "notyf",
          message: "Please indicate if you have reached out to the curation team",
        });
        throw errorArray;
      }
      if (userSelectedTheyHaveNotReachedOutToCurationTeam) {
        errorArray.push({
          type: "notyf",
          message: "Please reach out to the curation team before continuing the curation process",
        });
        throw errorArray;
      }

      window.sodaJSONObj["dataset-metadata"]["submission-metadata"]["consortium-data-standard"] =
        "";
      window.sodaJSONObj["dataset-metadata"]["submission-metadata"]["funding-consortium"] =
        "EXTERNAL";
    }

    const setConsortiumDataStandard =
      window.sodaJSONObj["dataset-metadata"]["submission-metadata"]["consortium-data-standard"];
    // If the set consortium data standard is SPARC, unskip the SPARC specific metadata pages
    if (setConsortiumDataStandard === "SPARC") {
      const setFundingConsortium =
        window.sodaJSONObj["dataset-metadata"]["submission-metadata"]["funding-consortium"];
      if (setFundingConsortium === "SPARC") {
        // If the funding consortium is SPARC, unskip the protocols page
        guidedUnSkipPage("guided-protocols-tab");
      } else {
        // If the funding consortium is not SPARC, skip the protocols page
        guidedSkipPage("guided-protocols-tab");
      }
      guidedUnSkipPage("guided-create-submission-metadata-tab");
    } else {
      // If the set consortium data standard is not SPARC, skip the SPARC specific metadata pages
      guidedSkipPage("guided-create-submission-metadata-tab");
      guidedSkipPage("guided-protocols-tab");
      // Manually set the SPARC award number to "EXTERNAL" for non-SPARC funded datasets (case for all non-SPARC funded datasets)
      window.sodaJSONObj["dataset-metadata"]["shared-metadata"]["sparc-award"] = "";
      window.sodaJSONObj["dataset-metadata"]["submission-metadata"]["milestones"] = [""];
      window.sodaJSONObj["dataset-metadata"]["submission-metadata"]["completion-date"] = "";
    }
  }

  if (pageBeingLeftID === "guided-name-subtitle-tab") {
    const datasetNameInput = useGlobalStore.getState().guidedDatasetName.trim();
    const datasetSubtitleInput = useGlobalStore.getState().guidedDatasetSubtitle.trim();

    //Throw error if no dataset name or subtitle were added
    if (!datasetNameInput) {
      errorArray.push({
        type: "notyf",
        message: "Please enter a dataset name.",
      });
    }

    const datasetNameContainsForbiddenCharacters = window.evaluateStringAgainstSdsRequirements(
      datasetNameInput,
      "string-contains-forbidden-characters"
    );
    if (datasetNameContainsForbiddenCharacters) {
      errorArray.push({
        type: "notyf",
        message: `A Pennsieve dataset name cannot contain any of the following characters: @#$%^&*()+=/\|"'~;:<>{}[]?`,
      });
    }
    if (!datasetSubtitleInput) {
      errorArray.push({
        type: "notyf",
        message: "Please enter a dataset subtitle.",
      });
    }

    if (errorArray.length > 0) {
      throw errorArray;
    }

    const currentDatasetName = window.sodaJSONObj["digital-metadata"]["name"];
    if (currentDatasetName) {
      // Update the progress file path name and banner image path if needed
      if (datasetNameInput !== currentDatasetName) {
        const currentProgressFileNames = getGuidedProgressFileNames();
        if (currentProgressFileNames.includes(datasetNameInput)) {
          errorArray.push({
            type: "notyf",
            message: `Unable to change dataset name to: ${datasetNameInput}. A dataset with that name already exists.`,
          });
          throw errorArray;
        }
        updateGuidedDatasetName(datasetNameInput);
        window.sodaJSONObj["digital-metadata"]["subtitle"] = datasetSubtitleInput;
      } else {
        window.sodaJSONObj["digital-metadata"]["subtitle"] = datasetSubtitleInput;
      }
    } else {
      const currentProgressFileNames = getGuidedProgressFileNames();
      if (currentProgressFileNames.includes(datasetNameInput)) {
        errorArray.push({
          type: "notyf",
          message: `A progress file already exists for the dataset: ${datasetNameInput}. Please enter a different dataset name.`,
        });
        throw errorArray;
      }
      window.sodaJSONObj["digital-metadata"]["name"] = datasetNameInput;
      window.sodaJSONObj["digital-metadata"]["subtitle"] = datasetSubtitleInput;
    }
  }

  if (pageBeingLeftID === "guided-prepare-dataset-structure-tab") {
    const selectedEntities = useGlobalStore.getState()["selectedEntities"];
    console.log("selectedEntities", selectedEntities);
    if (selectedEntities.length === 0) {
      errorArray.push({
        type: "notyf",
        message: "Please select at least one option that applies to your dataset",
      });
      throw errorArray;
    }
    console.log("selectedEntities", selectedEntities);
    window.sodaJSONObj["selected-entities"] = selectedEntities;
    console.log("selectedEntities", selectedEntities);

    if (!selectedEntities.includes("subjects") && !selectedEntities.includes("code")) {
      errorArray.push({
        type: "notyf",
        message: "You must indicate that your dataset contains subjects and/or code",
      });
      throw errorArray;
    }

    if (selectedEntities.includes("subjects")) {
      guidedUnSkipPage("guided-subjects-entity-addition-tab");
      guidedUnSkipPage("guided-subjects-entity-selection-tab");
      guidedUnSkipPage("guided-unstructured-data-import-tab");
      guidedUnSkipPage("guided-create-subjects-metadata-tab");
    } else {
      guidedSkipPage("guided-subjects-entity-addition-tab");
      guidedSkipPage("guided-subjects-entity-selection-tab");
      guidedSkipPage("guided-unstructured-data-import-tab");
      guidedSkipPage("guided-create-subjects-metadata-tab");
    }

    if (selectedEntities.includes("samples")) {
      guidedUnSkipPage("guided-samples-entity-addition-tab");
      guidedUnSkipPage("guided-samples-entity-selection-tab");
      guidedUnSkipPage("guided-create-samples-metadata-tab");
    } else {
      guidedSkipPage("guided-samples-entity-addition-tab");
      guidedSkipPage("guided-samples-entity-selection-tab");
      guidedSkipPage("guided-create-samples-metadata-tab");
    }

    if (selectedEntities.includes("sites")) {
      guidedUnSkipPage("guided-sites-entity-addition-tab");
      guidedUnSkipPage("guided-sites-entity-selection-tab");
      guidedUnSkipPage("guided-create-sites-metadata-tab");
    } else {
      guidedSkipPage("guided-sites-entity-addition-tab");
      guidedSkipPage("guided-sites-entity-selection-tab");
      guidedSkipPage("guided-create-sites-metadata-tab");
    }

    if (selectedEntities.includes("performances")) {
      guidedUnSkipPage("guided-performances-entity-addition-tab");
      guidedUnSkipPage("guided-performances-entity-selection-tab");
      guidedUnSkipPage("guided-create-performances-metadata-tab");
    } else {
      guidedSkipPage("guided-performances-entity-addition-tab");
      guidedSkipPage("guided-performances-entity-selection-tab");
      guidedSkipPage("guided-create-performances-metadata-tab");
    }

    if (selectedEntities.includes("code")) {
      guidedUnSkipPage("guided-code-folder-tab");
    } else {
      guidedSkipPage("guided-code-folder-tab");
    }
  }
};
